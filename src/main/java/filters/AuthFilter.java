package filters;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import modeles.Employe;
import modeles.Role;


public class AuthFilter implements Filter {

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        String uri = req.getRequestURI();

        System.out.println("[FILTER] Acc√®s √† l'URL : " + uri);

        // üîπ Liste des URL accessibles SANS connexion (ajout de /test-database)
        List<String> publicUrls = Arrays.asList("/Devoir/login", "/Devoir/logout", "/Devoir/test-database");

        if (publicUrls.contains(uri)) {
            System.out.println("[FILTER] URL publique, acc√®s autoris√©.");
            chain.doFilter(request, response);
            return;
        }

        // V√©rifier si l'utilisateur est connect√©
        Employe user = (Employe) req.getSession().getAttribute("user");

        if (user == null) {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            res.getWriter().write("Acc√®s refus√©. Connectez-vous.");
            System.out.println("[FILTER ERROR] Aucun utilisateur connect√©.");
            return;
        }
        if (user.getRole() == Role.EMPLOYE) {
            // üîπ Bloquer l'acc√®s aux fonctionnalit√©s d'administration
            List<String> adminUrls = Arrays.asList("/Devoir/employes", "/Devoir/departements", "/Devoir/evaluations");

            for (String url : adminUrls) {
                if (uri.startsWith(url)) {
                    res.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    res.getWriter().write("Acc√®s refus√©. Seuls les administrateurs et responsables peuvent acc√©der √† cette ressource.");
                    System.out.println("[FILTER ERROR] Acc√®s interdit pour un employ√© √† l'URL : " + uri);
                    return;
                }
            }
        }
        if (user.getRole() == Role.RESPONSABLE) {
            // üîπ Bloquer l'acc√®s aux fonctionnalit√©s r√©serv√©es √† l'ADMIN
            List<String> adminOnlyUrls = Arrays.asList("/Devoir/employes", "/Devoir/departements");

            for (String url : adminOnlyUrls) {
                if (uri.startsWith(url)) {
                    res.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    res.getWriter().write("Acc√®s refus√©. Seuls les administrateurs peuvent acc√©der √† cette ressource.");
                    System.out.println("[FILTER ERROR] Acc√®s interdit pour un responsable √† l'URL : " + uri);
                    return;
                }
            }
        }
     // üîπ Emp√™cher l'ADMIN d'acc√©der aux √©valuations
        if (user.getRole() == Role.ADMIN) {
            List<String> evaluationUrls = Arrays.asList("/Devoir/evaluations");

            for (String url : evaluationUrls) {
                if (uri.startsWith(url)) {
                    res.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    res.getWriter().write("Acc√®s refus√©. Seuls les responsables peuvent g√©rer les √©valuations.");
                    System.out.println("[FILTER ERROR] Acc√®s interdit pour un administrateur √† l'URL : " + uri);
                    return;
                }
            }
        }




        System.out.println("[FILTER SUCCESS] Utilisateur authentifi√© : " + user.getEmail() + " (" + user.getRole() + ")");

        chain.doFilter(request, response);
    }
}
